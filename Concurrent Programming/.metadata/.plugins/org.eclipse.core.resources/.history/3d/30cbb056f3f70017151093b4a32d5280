package edu.coursera.concurrent;

import edu.rice.pcdp.Actor;

import static edu.rice.pcdp.PCDP.finish;

/**
 * An actor-based implementation of the Sieve of Eratosthenes.
 *
 * TODO Fill in the empty SieveActorActor actor class below and use it from
 * countPrimes to determin the number of primes <= limit.
 */
public final class SieveActor extends Sieve {
    /**
     * {@inheritDoc}
     *
     * TODO Use the SieveActorActor class to calculate the number of primes <=
     * limit in parallel. You might consider how you can model the Sieve of
     * Eratosthenes as a pipeline of actors, each corresponding to a single
     * prime number.
     */
    @Override
    public int countPrimes(final int limit) {
        final SieveActorActor sieveActor = new SieveActorActor(2);
        finish(() -> {
	        for (int i = 3; i <= limit; i+= 2) {
		        sieveActor.send(i);
	        }
	        sieveActor.send(0);
        });

        int count = 0;
        SieveActorActor loopActor = sieveActor;
        while (loopActor != null) {
        	count++;
        	loopActor = loopActor.nextActor();
        }
        return count;
    }

    private void finish(Object object) {
		// TODO Auto-generated method stub
		
	}

	private void finish(Object object) {
		// TODO Auto-generated method stub
		
	}

	/**
     * An actor class that helps implement the Sieve of Eratosthenes in
     * parallel.
     */
    public static final class SieveActorActor extends Actor {
        /**
         * Process a single message sent to this actor.
         *
         * TODO complete this method.
         *
         * @param msg Received message
         */
    	private int localPrime;
    	private SieveActorActor nextActor;
    	
    	public SieveActorActor(int localPrime) {
    		this.localPrime = localPrime;
    	}
    	
    	public SieveActorActor nextActor() {
    		return nextActor;
    	}
    	
        @Override
        public void process(final Object msg) {
            final int candidate = (Integer) msg;
            if (candidate == 0) {
            	if (nextActor != null) {
            		nextActor.send(msg);
            	}
            	return;
            } else {
            	final boolean locallyPrime = (candidate % localPrime != 0);
            	if (locallyPrime) {
            		if (nextActor == null) {
            			nextActor = new SieveActorActor(candidate);
            		} else {
            			nextActor.send(msg);
            		}
            	}
            }
        }
    }
}
